plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.talentmarket'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jacoco {
	toolVersion = "0.8.8"
}

subprojects {
	apply(plugin = "jacoco")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	// 스프링 세션 코어


	// 스프링 부트 스타터 데이터 JDBC
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.session:spring-session-jdbc'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mockito:mockito-core:3.12.4'


}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

// report 생성
jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}

	afterEvaluate { // report에서 제외함. 안보여주기만 하는 것.
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/*Application*',
					"**/*Config*",
					"**/*config*",
					'**/*entity',
					'**/*Dto*',
					"**/*Request*",
					"**/*Response*",
					"**/*Interceptor*",
					'**/*Exception*',
					'**/*exception*'
			])
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

// violationRules에 따라서 커버리지를 만족하는지 검증
jacocoTestCoverageVerification {
	afterEvaluate { // verify에서 제외함. 퍼센티지에서 제거함.
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/*Application*',
					"**/*config*",
					'**/*entity',
					'**/*Dto*',
					"**/*Request*",
					"**/*Response*",
					"**/*Interceptor*",
					'**/*Exception*',
					'**/*exception*'
			])
		}))
	}
	violationRules {
		rule {
			// 룰을 간단히 켜고 끌 수 있다.
			enabled = true
			// 룰을 체크할 단위는 클래스 단위
			element = 'CLASS'
			// 브랜치 커버리지를 최소한 90% 만족시켜야 한다.
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}
			// 라인 커버리지를 최소한 80% 만족시켜야 한다.
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}
			// 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한한다.
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 200
			}
		}
	}
}

task testCoverage(type: Test) { // testCoverage라는 task가 생성됨.
	group 'verification'
	description 'Runs the unit tests with coverage'

	// test -> jacocoTestReport -> jacocoTestCoverageVerification 순으로 작동한다.
	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

